{"version":3,"sources":["components/Hero.js","components/Menu.js","components/Steps.js","helpers/getSubtitle.js","helpers/getTitle.js","helpers/splitSteps.js","App.js","serviceWorker.js","index.js"],"names":["Hero","subtitle","title","className","Menu","steps","map","slug","key","href","MessageBody","props","children","Steps","content","id","source","renderers","paragraph","list","escapeHtml","getSubtitle","markdown","split","getTitle","splitSteps","shift","i","length","push","lower","trim","App","state","a","fetch","res","text","document","this","setState","Prism","highlightAll","slice","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26057ea7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Hero = ({subtitle, title}) => (\n\n<section className=\"hero is-primary has-background-pink\">\n\t<div className=\"hero-body\">\n\t\t<div className=\"columns\">\n\t\t\t<div className=\"column is-12\">\n\t\t\t\t<div className=\"container content\">\n\t\t\t\t\t<i className=\"is-large fas fa-code\"></i>\n\t\t\t\t\t<h1 className=\"title\">{title}</h1>\n\t\t\t\t\t<h3 className=\"subtitle\">\n\t\t\t\t\t\t{subtitle}\n\t\t\t\t\t</h3>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</section>\n);\n\nexport default Hero;\n","import React from 'react';\n\nconst Menu = ({ steps }) => (\n  <div className=\"column is-3\">\n    <aside className=\"menu\">\n      <p className=\"menu-label\">\n        Liste des Ã©tapes\n      </p>\n      <ul className=\"menu-list\">\n        {\n          steps.map(({ slug, title }) => (\n            <li key={slug}>\n              <a href={`#${slug}`} className=\"has-background-grey has-text-white\">\n                {/* <i className=\"fab fa-github\"></i> */}\n                {` ${title}`}\n              </a>\n            </li>\n          ))\n        }\n      </ul>\n    </aside>\n  </div>\n);\n\nexport default Menu;\n","import React from 'react';\nimport Markdown from 'react-markdown';\n\nconst MessageBody = (props) => (\n  <div className=\"message-body\">\n    {props.children} \n  </div>\n);\n\nconst Steps = ({ steps }) => (\n  steps.map(({ title, slug, content }) => (\n    <div key={slug} className=\"box\">\n      <h4 id={slug} className=\"title is-3\">\n        {/* <i className=\"fab fa-github\"></i> */}\n        {title}\n        </h4>\n      <article className=\"message is-primary\">\n        <Markdown\n          source={content}\n          renderers={{\n            paragraph: MessageBody,\n            list: MessageBody\n          }}\n          escapeHtml={false}\n        />\n      </article>\n    </div>\n  ))\n);\n\nexport default Steps;\n","export default function getSubtitle (markdown) {\n    const splitRe = /## (.*)/g;\n    return markdown.split(splitRe)[1];\n}","export default function getTitle (markdown) {\n    const splitRe = /# (.*)/g;\n    return markdown.split(splitRe)[1];\n}","import slug from 'slug';\n\nexport default function splitSteps(markdown) {\n  const splitRe = /#### (.*)/g;\n  const split = markdown.split(splitRe);\n  split.shift();\n  const steps = [];\n  for (let i = 0; i < split.length; i += 2) {\n    steps.push({\n      title: split[i],\n      slug: slug(split[i], {lower: true}),\n      content: split[i + 1].trim()\n    })\n  }\n  return steps;\n}\n","import React, { Component } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-bash';\nimport Hero from './components/Hero';\nimport Menu from './components/Menu';\nimport Steps from './components/Steps';\nimport getSubtitle from './helpers/getSubtitle'\nimport getTitle from './helpers/getTitle'\nimport splitSteps from './helpers/splitSteps';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      steps: [],\n      subtitle: '',\n      title: ''\n    };\n  }\n\n  async componentDidMount() {\n    const res = await fetch('content.md');\n    const markdown = await res.text();\n    const steps = splitSteps(markdown);\n    const title = getTitle(markdown);\n    const subtitle = getSubtitle(markdown);\n    document.title = title;\n    this.setState({ steps, subtitle, title }, Prism.highlightAll);\n  }\n\n  render() {\n    const { steps, subtitle, title } = this.state;\n    return (\n      <div className=\"App\">\n        <Hero title={title} subtitle={subtitle}/>\n        <section className=\"section\">\n\t        <div className=\"container\">\n\t        \t<div className=\"columns\">\n              <Menu steps={steps.slice(1)} />\n\n              <div className=\"column is-9\">\n                <div className=\"content is-medium\">\n                  <h3 className=\"title is-3\">{steps.length ? steps[0].title : ''}</h3>\n                  <p><em>{steps.length ? steps[0].content : ''}</em></p>\n\n                    <Steps steps={steps.slice(1)} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}